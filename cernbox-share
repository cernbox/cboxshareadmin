#!/usr/bin/env python2
# -*- python -*-
#
# The CERNBox Project.
#
# Author: 
# License: AGPL
#
#$Id: $
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Perform internal setup of the environment.
# This is a Copy/Paste logic which must stay in THIS file
def standardSetup():
   import sys, os.path
   # insert the path to cernafs based on the relative position of this scrip inside the service directory tree
   exeDir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))
   pythonDir = os.path.join(exeDir, 'python' )
   sys.path.insert(0, pythonDir)
   import cernbox_utils.setup
   cernbox_utils.setup.standardSetup(sys.argv[0]) # execute a setup hook

standardSetup()
del standardSetup
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

config = None

import os, os.path, sys
import subprocess

def quote(s):
   return "'"+s+"'"

# remove duplicates, preserving order
def squash(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]

def main():
   global config
   import cernbox_utils.script

   parser=cernbox_utils.script.arg_parser(description='Manipulate regular shares to users and egroups. ')
   subparser = parser.add_subparsers(title='command',dest='cmd')

   add_command = subparser.add_parser('add', help="add share to the system")
   #add_command.add_argument("--force",default=False,action='store_true', help="do not perform consistency checks")
   add_command.add_argument("--nodb", default=False, action='store_true', help="do not modify the database and act on the storage ACLs only (check if the db entry already exists)")
   add_command.add_argument("path", help="path on storage")
   add_command.add_argument("sharee", help="share with u:USER or egroup:GROUP")
   add_command.add_argument("acl", help="access rights: r (read), rw (read-write)")

   remove_command = subparser.add_parser('remove', help="remove share the system")
   #remove_command.add_argument("--force",default=False,action='store_true', help="do not perform consistency checks")
   remove_command.add_argument("--nodb", default=False, action='store_true', help="do not modify the database and act on the storage ACLs only (check if the db entry does not exist)")
   remove_command.add_argument("path", help="path on storage")
   remove_command.add_argument("sharee", help="share with u:USER or egroup:GROUP")

   verify_command = subparser.add_parser('verify', help="verify consistency of shares owned by the given user")
   verify_command.add_argument("--fix", default=False, action='store_true', help="fix any sharing inconsistencies in the storage and in the database")
   verify_command.add_argument("--deep-fs-check", default=False, action='store_true', help="check the entire filesystem of the share_owner to misconfigured ACLs also in non-shared folders")
   verify_command.add_argument("shares_owner", help="'*' to check all users in the system")

   verify_command = subparser.add_parser('remove-orphan-xbits', help="remove xbits which were set in the initial implementation in the parent ACLs")
   verify_command.add_argument("--fix", default=False, action='store_true', help="fix it")
   verify_command.add_argument("--logdir",default="",action="store",help="log directory")
   verify_command.add_argument("path", help="top of the tree to check")

   verify_command = subparser.add_parser('show-other-acls', help="show all directories which have an acl which does not contain name (useful to see which directories are open besides the owner)")
   verify_command.add_argument("--ignore-special-directories", default=False, action='store_true', help="ignore special system directories (%s)"%is_special_folder.__doc__)
   verify_command.add_argument("path", help="top of the tree to check")
   verify_command.add_argument("name", help="name in ACL")
   
   args = parser.parse_args()

   config = cernbox_utils.script.configure(args.config)

   logger = cernbox_utils.script.getLogger(level=args.loglevel)

   logger.info("Using  DB: %s",config['dbhost'])
   logger.info("Using EOS: %s",config['eos_mgm_url'])

   if args.cmd == "add":
      
      entity,who = parse_sharee(args.sharee)

      path = parse_path(args.path)

      ACL = {'r':'read','rw':'read-write'}
      ENTITY = {'u':'user','e':'egroup'}

      print "Add",ACL[args.acl],"share for",ENTITY[entity],who,"to tree",args.path
      if args.nodb:
        print "Modify storage ACLs only (database entry must already exist)."
      else:
        print "Modify storage ACLs and add database entry."

   if args.cmd == "show-other-acls":
      from cernbox_utils import eos
      eos = eos.EOS(config['eos_mgm_url'])
      eos.role=(0,0)

      other_acl_cnt = 0
      empty_acl_cnt = 0
      special_dir_cnt = 0
      cnt = 0

      for f in eos.fileinfo_r(args.path,type="-d"):

         cnt += 1
      
         if is_special_folder(f.file):
            special_dir_cnt+=1
            if args.ignore_special_directories:
               continue

         try:
            eos_acls = eos.parse_sysacl(f.xattr['sys.acl'])
         except KeyError,x:
            empty_acl_cnt+=1 # no ACL at all

         for acl in eos_acls:
            if acl.name != args.name:
               other_acl_cnt+=1
               logger.info("%s %s",f.file,eos_acls)
               break
            
      logger.info("Scan completed. Found %d directories, %d with acls not containing %s, %d with empty acls, %d special dirs",cnt,other_acl_cnt,args.name,empty_acl_cnt,special_dir_cnt)

   if args.cmd == "remove-orphan-xbits":
      from cernbox_utils import eos
      eos = eos.EOS(config['eos_mgm_url'])
      eos.role=(0,0)

      logfn = ""

      if args.logdir:
         import logging
         fix_str = ""
         if args.fix: fix_str=".fix"
         logfn = os.path.join(args.logdir,os.path.normpath(args.path).replace(os.sep,"_")+fix_str+".log")
         fh = logging.FileHandler(logfn)
         fh.setFormatter(logging.Formatter("%(asctime)s %(message)s"))
         logger.addHandler(fh)

      cnt = 0
      fixed_cnt = 0

      for f in eos.fileinfo_r(args.path,type="-d"):
         cnt += 1
         try:
            eos_acls = eos.parse_sysacl(f.xattr['sys.acl'])
         except KeyError,x:
            continue # no ACL at all

         new_acls = []
         for acl in eos_acls:
            if not acl.bits == "x":
               new_acls.append(acl)

         #logger.info(" --- SCAN      --- %s --- %s --- %s",f.fid, f.file, eos.dump_sysacl(eos_acls))

         if new_acls != eos_acls:
            logger.info(" --- NEW_ACL   --- %s --- %s --- %s --- %s",f.fid, f.file, eos.dump_sysacl(new_acls),eos.dump_sysacl(eos_acls))
            eos.set_sysacl(f.file,eos.dump_sysacl(new_acls),dryrun=not args.fix)
            fixed_cnt += 1
         else:
            #logger.info(" --- NO_CHANGE --- %s --- %s --- %s",f.fid, f.file, eos.dump_sysacl(eos_acls))
            pass

      logger.info("Scanned %d directories, fixed %d directories, logfile: %s",cnt,fixed_cnt,logfn)

#            print f.file, "would set", eos_acls, "->", new_acls
            #if len(new_acls)>1: print "MUTLIPLE"
#
#         else:
#            print f.file, "no change",eos_acls

   if args.cmd == "verify":

      import pwd

      #for k in config:
      #   print k,config[k]

      from cernbox_utils import db,eos

      if not args.shares_owner.strip():
         logger.critical("Must provide a shares_owner or '*'")
         return

      if args.shares_owner == '*':
         args.shares_owner = ''

      if args.deep_fs_check:
         if not args.shares_owner:
            logger.critical("Must provide a single shares_owner for --deep-fs-check option")
            return

      db = db.ShareDB()

      shares=db.get_share(owner=args.shares_owner,share_type="regular")

      eos = eos.EOS(config['eos_mgm_url'])
      eos.role=(0,0)

      # calculate complete acl list for each shared eos path (fid)
      # verify if shares are not outdated
   
      shared_fids = {}

      shared_paths = {}
      shared_acls = {}

      #parent_paths = {}

      logger.info('Found %d shares of user %s',len(shares),args.shares_owner)

      for s in shares:
         fid = s.item_source

         logger.debug("Processing share: %s %s->%s %s %s",s.id,s.uid_owner,s.share_with,s.item_source,quote(s.file_target))

         # check if owner still exists, if not issue error but treat the share normally
         # otherwise this is dangerous if local password database is not fully synchronized with ldap!
         try:
            pwd.getpwnam(s.uid_owner)
         except:
            logger.error("USER_NOT_FOUND: share owner uid %s does not exist",s.uid_owner)

         # Verify if share points to a valid storage entity
         try:
            f=eos.fileinfo("inode:"+fid)

            if f.file.startswith(config['eos_recycle_dir']):
               # eos entry is in the trashbin
               logger.error("TRASHBIN_SHARE id=%d owner=%s sharee=%s target='%s' fid=%s",s.id,s.uid_owner,s.share_with,s.file_target,fid)
               continue
         except subprocess.CalledProcessError,x:
            if x.returncode == 2:
               # eos entry does not exist
               logger.error("DEAD_SHARE id=%d owner=%s sharee=%s target='%s' fid=%s",s.id,s.uid_owner,s.share_with,s.file_target,fid)
               continue

         # share pointing outside of the home directories area (e.g. project spaces)
         # we do not validate these spaces later so we do not add these for subsequent verification
         if not os.path.normpath(f.file).startswith(config['eos_prefix']):
            logger.warning("OUTSIDE_SHARE share %s %s is outside of %s (%s)",s.id,s.file_target,config['eos_prefix'],f.file)
            continue

         # NESTEED SHARES ARE OK
         #if len(os.path.normpath(f.file).split("/"))>6:
         #   logger.error("NESTED_SHARE id=%d owner=%s sharee=%s target='%s' fid=%s actual_path=%s",s.id,s.uid_owner,s.share_with,s.file_target,fid,quote(f.file))
         #else:
         
         logger.info("VALID_SHARE: share_id=%s %s->%s %s %s %s",s.id,s.uid_owner,s.share_with,s.item_source,quote(s.file_target),quote(f.file))
         
         # this is the expected ACL entry in the shared directory tree
         acl = eos.AclEntry(name=s.share_with)

         if is_egroup(s.share_with):
            acl.entity = "egroup"
         else:
            acl.entity = "u"

         if s.permissions == 1:
            acl.bits = "rx"
         else:
            acl.bits = "rwx+d"


         shared_fids.setdefault(fid,[]).append(acl)

         p = os.path.normpath(f.file)
         shared_paths[p] = fid
         shared_acls.setdefault(p,[]).append(acl)

         #browse_acl = eos.AclEntry(name=acl.name,entity=acl.entity,bits='x') # expected browse ACL of the parent

         #parent_paths.setdefault(os.path.dirname(os.path.normpath(f.file)),[]).append(browse_acl)

         # check if the parent directory has the x permission bits set for each sharee in the acls
         #pf = eos.fileinfo(os.path.dirname(os.path.normpath(f.file)))
         #parent_acls = set(eos.parse_sysacl(pf.xattr['sys.acl']))

         #browse_acl2 = eos.AclEntry(name=acl.name,entity=acl.entity,bits='rx') # expected browse ACL of the parent
         #if browse_acl not in parent_acls:
         #if browse_acl not in parent_acls and browse_acl2 not in parent_acls:

      # check browsable ACLs set on the parent paths

      # for path in parent_paths:
      #    f = eos.fileinfo(path)
            
      #    db_acls = parent_paths[path]

      #    # add the ACL for the owner
      #    try:
      #       owner = pwd.getpwuid(int(f.uid)).pw_name
      #    except KeyError,x:
      #       logger.error("USER_NOT_FOUND: file owner uid %s does not exist, skipping... %s",f.uid,f.file)
      #       continue

      #    db_acls = [eos.AclEntry(entity='u',name=owner,bits='rwx!m')] + db_acls

      #    eos_acls = eos.parse_sysacl(f.xattr['sys.acl'])

      #    missing_acls=set(db_acls)-set(eos_acls)
      #    extra_acls=set(eos_acls)-set(db_acls)

      #    if missing_acls:
      #      logger.warning("MISSING_PARENT_ACL path '%s': %s ACTUAL %s EXPECTED %s",f.file,missing_acls,f.xattr['sys.acl'],eos.dump_sysacl(squash(db_acls)))

      #    if extra_acls:
      #      logger.warning("EXTRA_PARENT_ACL path '%s': %s ACTUAL %s EXPECTED %s",f.file,extra_acls,f.xattr['sys.acl'],eos.dump_sysacl(squash(db_acls)))

      #    if extra_acls or missing_acls:
      #       eos.set_sysacl(f.file,eos.dump_sysacl(db_acls),dryrun=not args.fix)

         
      # shares within shares are not allowed
      # check it

      blacklist_paths = []

      for i,p1 in enumerate(shared_paths):
         p1 = p1+"/" # append trailing slash, otherwise directories which basename is a substring give false positive, e.g.: /eos/user/k/kuba/tmp.readonly /eos/user/k/kuba/tmp
         for j,p2 in enumerate(shared_paths):
            p2 = p2+"/" # see above
            if i != j:
               if p1.startswith(p2):
                  blacklist_paths.append(p2)
                  logger.error("SHARE WITHIN SHARE is not allowed: %s %s",p1,p2)


      logger.info("Expected shared paths with visibility to others (%s)",len(shared_acls))
      for p,acl in shared_acls.items():
         logger.info("Expected acls in shared path %s %s",p,eos.dump_sysacl(acl))


      logger.info("Blacklisted trees (%s) which will not be analysed but are problematic",len(blacklist_paths))
      for p in blacklist_paths:
         logger.error("Blacklisted %s",p)

      # scan full tree

      if args.deep_fs_check:

         homedir = '/eos/user/%s/%s'%(args.shares_owner[0],args.shares_owner)

         cnt = 0
         fixed_cnt = 0
         blacklist_cnt = 0

         for f in eos.fileinfo_r(homedir,type="-d"):
            cnt += 1
            try:
               eos_acls = eos.parse_sysacl(f.xattr['sys.acl'])
            except KeyError,x:
               pass # no ACL at all


            # do not touch anything in blacklisted paths: we may not know what to do with them (yet)
            stop = False
            for black_p in blacklist_paths:
               if f.file.startswith(black_p):
                  blacklist_cnt += 1
                  stop = True
                  break

            if stop:
               continue

            # expected ACL
            expected_acls = [eos.AclEntry(entity="u",name=args.shares_owner,bits="rwx!m")] # this acl entry should be always set for every directory in homedir
            p = os.path.normpath(f.file)

            for sp in shared_paths:
               if p.startswith(sp): # directory is part of a share tree which has a top at sp
                  expected_acls.extend(shared_acls[sp])

            expected_acls = squash(set(expected_acls))

            #logger.info(" --- SCAN      --- %s --- %s --- %s",f.fid, f.file, eos.dump_sysacl(eos_acls))

            if set(expected_acls) != set(eos_acls):
               logger.error(" ---  ACL_NEED_CHANGE  --- %s --- %s --- NEW --- %s --- CURRENT --- %s",f.fid, f.file, eos.dump_sysacl(expected_acls),eos.dump_sysacl(eos_acls))
               eos.set_sysacl(f.file,eos.dump_sysacl(expected_acls),dryrun=not args.fix)
               fixed_cnt += 1
            else:
               #logger.info(" --- NO_CHANGE --- %s --- %s --- %s",f.fid, f.file, eos.dump_sysacl(eos_acls))
               pass

         logger.info("Scanned %d directories, fixed %d directories, blacklisted %d directories ",cnt,fixed_cnt,blacklist_cnt)
            
      return 

      # compare the acl list calculated from share db with the actual acl list on eos in the shared directory tree
 
      for fid in shared_fids:

         f=eos.fileinfo("inode:"+fid)

         db_acls = set(shared_fids[fid])

         # add the ACL for the owner
         try:
            owner = pwd.getpwuid(int(f.uid)).pw_name
         except KeyError,x:
            logger.error("USER_NOT_FOUND: file owner uid %s does not exist, skipping... %s",f.uid,f.file)
            continue

         db_acls.add(eos.AclEntry(entity='u',name=owner,bits='rwx!m'))

         # here we recursively check if the same set of db_acls is consistenly applied in the whole tree
         # the first entry reported is the shared directory itself (the top level of the tree)
         # we will need maybe to prune bottom paths to avoid too many error messages for large trees
         for f in eos.fileinfo_r(f.file,type="-d"):
            if not is_special_folder(f.file):
               logger.debug("checking shared tree: %s",str(f.file))
               eos_acls = set(eos.parse_sysacl(f.xattr['sys.acl']))

               extra_acls = eos_acls-db_acls
               if extra_acls:
                  logger.warning("EXTRA_ACL path '%s': %s owner: %s ACTUAL %s EXPECTED %s",f.file,eos.dump_sysacl(squash(extra_acls)),owner,f.xattr['sys.acl'], eos.dump_sysacl(squash(db_acls)))

               missing_acls = db_acls-eos_acls
               if missing_acls:
                  logger.error("MISSING_ACL path '%s': %s owner: %s ACTUAL %s EXPECTED %s",f.file,missing_acls,owner,f.xattr['sys.acl'], eos.dump_sysacl(squash(db_acls)))
                  break
      logger.info('verified %d shares and %d eos paths'%(len(shares),len(shared_fids)))
   logger.info("OK")

def is_special_folder(path):
   "Special system directories are hidden and used to implement certain features such as atomic upload, versioning: .sys.v# .sys.a#"
   name = os.path.basename(os.path.normpath(path))
   for prefix in ['.sys.v#','.sys.a#']:
      if name.startswith(prefix):
         return True
   return False

   
def is_egroup(name):
   return '-' in name

def parse_sharee(sharee):
    try:
       entity,who = sharee.split(":") # this may also raise ValueError
       if not entity in ['u','egroup']:
          raise ValueError()
    except ValueError:
       print >> sys.stderr, "ERROR: specify sharee '%s' in u:USER or egroup:GROUP format"%args.sharee
       sys.exit(2)
    return entity,who

def parse_path(path):
    if not path.startswith(config['eos_prefix']):
       print >> sys.stderr, "ERROR: path '%s' should start with '%s'"% (path,config['eos_prefix'])
       sys.exit(2)
    return path

if __name__ == "__main__":
   main()
